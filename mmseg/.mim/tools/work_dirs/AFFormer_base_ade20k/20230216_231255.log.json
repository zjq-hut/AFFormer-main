{"env_info": "sys.platform: win32\nPython: 3.8.10 (default, May 19 2021, 13:12:57) [MSC v.1916 64 bit (AMD64)]\nCUDA available: True\nGPU 0: NVIDIA GeForce RTX 3060 Laptop GPU\nCUDA_HOME: C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.1\nNVCC: Cuda compilation tools, release 11.1, V11.1.105\nMSVC: \u7528\u4e8e x64 \u7684 Microsoft (R) C/C++ \u4f18\u5316\u7f16\u8bd1\u5668 19.29.30138 \u7248\nGCC: n/a\nPyTorch: 1.8.0+cu111\nPyTorch compiling details: PyTorch built with:\n  - C++ Version: 199711\n  - MSVC 192829337\n  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.7.0 (Git Hash 7aed236906b1f7a05c0917e5257a1af05e9ff683)\n  - OpenMP 2019\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.1\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.0.5\n  - Magma 2.5.4\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=C:/w/b/windows/tmp_bin/sccache-cl.exe, CXX_FLAGS=/DWIN32 /D_WINDOWS /GR /EHsc /w /bigobj -DUSE_PTHREADPOOL -openmp:experimental -DNDEBUG -DUSE_FBGEMM -DUSE_XNNPACK, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.8.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=OFF, USE_NNPACK=OFF, USE_OPENMP=ON, \n\nTorchVision: 0.9.0+cu111\nOpenCV: 4.6.0\nMMCV: 1.5.0\nMMCV Compiler: MSVC 192930138\nMMCV CUDA Compiler: 11.1\nMMSegmentation: 0.21.1+", "seed": 1719938734, "exp_name": "AFFormer_base_ade20k.py", "mmseg_version": "0.21.1+", "config": "norm_cfg = dict(type='SyncBN', requires_grad=True)\nham_norm_cfg = dict(type='GN', num_groups=32, requires_grad=True)\nmodel = dict(\n    type='EncoderDecoder',\n    pretrained=\n    'E:/5.23/2.13-2.20/2.15/AFFormer-main/pretained_weight/AFFormer_base_ImageNet1k.pth',\n    backbone=dict(\n        type='afformer_base',\n        strides=[4, 2, 2, 2],\n        pretrained=\n        'E:/5.23/2.13-2.20/2.15/AFFormer-main/pretained_weight/AFFormer_base_ImageNet1k.pth'\n    ),\n    decode_head=dict(\n        type='CLS',\n        in_channels=[216],\n        in_index=[3],\n        channels=256,\n        aff_channels=256,\n        dropout_ratio=0.1,\n        num_classes=150,\n        norm_cfg=dict(type='GN', num_groups=32, requires_grad=True),\n        align_corners=False,\n        loss_decode=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n        aff_kwargs=dict(MD_R=16)),\n    train_cfg=dict(),\n    test_cfg=dict(mode='whole'))\ndataset_type = 'ADE20KDataset'\ndata_root = 'G:/AI/data/ade20k'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ncrop_size = (256, 256)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', reduce_zero_label=True),\n    dict(type='Resize', img_scale=(256, 256), ratio_range=(0.5, 2.0)),\n    dict(type='RandomCrop', crop_size=(256, 256), cat_max_ratio=0.75),\n    dict(type='RandomFlip', prob=0.5),\n    dict(type='PhotoMetricDistortion'),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size=(256, 256), pad_val=0, seg_pad_val=255),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n]\nval_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(256, 256),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(256, 256),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='ResizeToMultiple', size_divisor=32),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=8,\n    workers_per_gpu=8,\n    train=dict(\n        type='RepeatDataset',\n        times=1,\n        dataset=dict(\n            type='ADE20KDataset',\n            data_root='G:/AI/data/ade20k',\n            img_dir='images/training',\n            ann_dir='annotations/training',\n            pipeline=[\n                dict(type='LoadImageFromFile'),\n                dict(type='LoadAnnotations', reduce_zero_label=True),\n                dict(\n                    type='Resize',\n                    img_scale=(256, 256),\n                    ratio_range=(0.5, 2.0)),\n                dict(\n                    type='RandomCrop',\n                    crop_size=(256, 256),\n                    cat_max_ratio=0.75),\n                dict(type='RandomFlip', prob=0.5),\n                dict(type='PhotoMetricDistortion'),\n                dict(\n                    type='Normalize',\n                    mean=[123.675, 116.28, 103.53],\n                    std=[58.395, 57.12, 57.375],\n                    to_rgb=True),\n                dict(type='Pad', size=(256, 256), pad_val=0, seg_pad_val=255),\n                dict(type='DefaultFormatBundle'),\n                dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n            ])),\n    val=dict(\n        type='ADE20KDataset',\n        data_root='G:/AI/data/ade20k',\n        img_dir='images/validation',\n        ann_dir='annotations/validation',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(256, 256),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='ADE20KDataset',\n        data_root='G:/AI/data/ade20k',\n        img_dir='images/validation',\n        ann_dir='annotations/validation',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(256, 256),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='ResizeToMultiple', size_divisor=32),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nlog_config = dict(\n    interval=50, hooks=[dict(type='TextLoggerHook', by_epoch=False)])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\ncudnn_benchmark = True\noptimizer = dict(\n    type='AdamW', lr=0.0003, betas=(0.9, 0.999), weight_decay=0.01)\noptimizer_config = dict()\nlr_config = dict(\n    policy='poly',\n    warmup='linear',\n    warmup_iters=1500,\n    warmup_ratio=1e-06,\n    power=1.0,\n    min_lr=0.0,\n    by_epoch=False)\nrunner = dict(type='IterBasedRunner', max_iters=20000)\ncheckpoint_config = dict(by_epoch=False, interval=2000)\nevaluation = dict(interval=2000, metric='mIoU')\nfind_unused_parameters = True\nwork_dir = './work_dirs\\AFFormer_base_ade20k'\ngpu_ids = [0]\nauto_resume = False\nseed = 1719938734\n", "CLASSES": ["wall", "building", "sky", "floor", "tree", "ceiling", "road", "bed ", "windowpane", "grass", "cabinet", "sidewalk", "person", "earth", "door", "table", "mountain", "plant", "curtain", "chair", "car", "water", "painting", "sofa", "shelf", "house", "sea", "mirror", "rug", "field", "armchair", "seat", "fence", "desk", "rock", "wardrobe", "lamp", "bathtub", "railing", "cushion", "base", "box", "column", "signboard", "chest of drawers", "counter", "sand", "sink", "skyscraper", "fireplace", "refrigerator", "grandstand", "path", "stairs", "runway", "case", "pool table", "pillow", "screen door", "stairway", "river", "bridge", "bookcase", "blind", "coffee table", "toilet", "flower", "book", "hill", "bench", "countertop", "stove", "palm", "kitchen island", "computer", "swivel chair", "boat", "bar", "arcade machine", "hovel", "bus", "towel", "light", "truck", "tower", "chandelier", "awning", "streetlight", "booth", "television receiver", "airplane", "dirt track", "apparel", "pole", "land", "bannister", "escalator", "ottoman", "bottle", "buffet", "poster", "stage", "van", "ship", "fountain", "conveyer belt", "canopy", "washer", "plaything", "swimming pool", "stool", "barrel", "basket", "waterfall", "tent", "bag", "minibike", "cradle", "oven", "ball", "food", "step", "tank", "trade name", "microwave", "pot", "animal", "bicycle", "lake", "dishwasher", "screen", "blanket", "sculpture", "hood", "sconce", "vase", "traffic light", "tray", "ashcan", "fan", "pier", "crt screen", "plate", "monitor", "bulletin board", "shower", "radiator", "glass", "clock", "flag"], "PALETTE": [[120, 120, 120], [180, 120, 120], [6, 230, 230], [80, 50, 50], [4, 200, 3], [120, 120, 80], [140, 140, 140], [204, 5, 255], [230, 230, 230], [4, 250, 7], [224, 5, 255], [235, 255, 7], [150, 5, 61], [120, 120, 70], [8, 255, 51], [255, 6, 82], [143, 255, 140], [204, 255, 4], [255, 51, 7], [204, 70, 3], [0, 102, 200], [61, 230, 250], [255, 6, 51], [11, 102, 255], [255, 7, 71], [255, 9, 224], [9, 7, 230], [220, 220, 220], [255, 9, 92], [112, 9, 255], [8, 255, 214], [7, 255, 224], [255, 184, 6], [10, 255, 71], [255, 41, 10], [7, 255, 255], [224, 255, 8], [102, 8, 255], [255, 61, 6], [255, 194, 7], [255, 122, 8], [0, 255, 20], [255, 8, 41], [255, 5, 153], [6, 51, 255], [235, 12, 255], [160, 150, 20], [0, 163, 255], [140, 140, 140], [250, 10, 15], [20, 255, 0], [31, 255, 0], [255, 31, 0], [255, 224, 0], [153, 255, 0], [0, 0, 255], [255, 71, 0], [0, 235, 255], [0, 173, 255], [31, 0, 255], [11, 200, 200], [255, 82, 0], [0, 255, 245], [0, 61, 255], [0, 255, 112], [0, 255, 133], [255, 0, 0], [255, 163, 0], [255, 102, 0], [194, 255, 0], [0, 143, 255], [51, 255, 0], [0, 82, 255], [0, 255, 41], [0, 255, 173], [10, 0, 255], [173, 255, 0], [0, 255, 153], [255, 92, 0], [255, 0, 255], [255, 0, 245], [255, 0, 102], [255, 173, 0], [255, 0, 20], [255, 184, 184], [0, 31, 255], [0, 255, 61], [0, 71, 255], [255, 0, 204], [0, 255, 194], [0, 255, 82], [0, 10, 255], [0, 112, 255], [51, 0, 255], [0, 194, 255], [0, 122, 255], [0, 255, 163], [255, 153, 0], [0, 255, 10], [255, 112, 0], [143, 255, 0], [82, 0, 255], [163, 255, 0], [255, 235, 0], [8, 184, 170], [133, 0, 255], [0, 255, 92], [184, 0, 255], [255, 0, 31], [0, 184, 255], [0, 214, 255], [255, 0, 112], [92, 255, 0], [0, 224, 255], [112, 224, 255], [70, 184, 160], [163, 0, 255], [153, 0, 255], [71, 255, 0], [255, 0, 163], [255, 204, 0], [255, 0, 143], [0, 255, 235], [133, 255, 0], [255, 0, 235], [245, 0, 255], [255, 0, 122], [255, 245, 0], [10, 190, 212], [214, 255, 0], [0, 204, 255], [20, 0, 255], [255, 255, 0], [0, 153, 255], [0, 41, 255], [0, 255, 204], [41, 0, 255], [41, 255, 0], [173, 0, 255], [0, 245, 255], [71, 0, 255], [122, 0, 255], [0, 255, 184], [0, 92, 255], [184, 255, 0], [0, 133, 255], [255, 214, 0], [25, 194, 194], [102, 255, 0], [92, 0, 255]]}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 1e-05, "memory": 1942, "data_time": 0.00631, "decode.loss_ce": 3.69576, "decode.acc_seg": 0.2552, "loss": 3.69576, "time": 0.20812}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 2e-05, "memory": 1942, "data_time": 0.00473, "decode.loss_ce": 3.66336, "decode.acc_seg": 2.39963, "loss": 3.66336, "time": 0.1559}
{"mode": "train", "epoch": 2, "iter": 150, "lr": 3e-05, "memory": 1942, "data_time": 0.04792, "decode.loss_ce": 3.59097, "decode.acc_seg": 10.51375, "loss": 3.59097, "time": 0.2004}
{"mode": "train", "epoch": 2, "iter": 200, "lr": 4e-05, "memory": 1942, "data_time": 0.00565, "decode.loss_ce": 3.32693, "decode.acc_seg": 22.33989, "loss": 3.32693, "time": 0.15744}
{"mode": "train", "epoch": 3, "iter": 250, "lr": 5e-05, "memory": 1942, "data_time": 0.04872, "decode.loss_ce": 3.04299, "decode.acc_seg": 26.29276, "loss": 3.04299, "time": 0.1999}
{"mode": "train", "epoch": 3, "iter": 300, "lr": 6e-05, "memory": 1942, "data_time": 0.00444, "decode.loss_ce": 2.83922, "decode.acc_seg": 32.90635, "loss": 2.83922, "time": 0.15486}
{"mode": "train", "epoch": 3, "iter": 350, "lr": 7e-05, "memory": 1942, "data_time": 0.00532, "decode.loss_ce": 2.47265, "decode.acc_seg": 27.55522, "loss": 2.47265, "time": 0.15398}
{"mode": "train", "epoch": 4, "iter": 400, "lr": 8e-05, "memory": 1942, "data_time": 0.04683, "decode.loss_ce": 2.39253, "decode.acc_seg": 34.02234, "loss": 2.39253, "time": 0.20129}
{"mode": "train", "epoch": 4, "iter": 450, "lr": 9e-05, "memory": 1942, "data_time": 0.00501, "decode.loss_ce": 2.16966, "decode.acc_seg": 31.38068, "loss": 2.16966, "time": 0.15275}
{"mode": "train", "epoch": 5, "iter": 500, "lr": 0.0001, "memory": 1942, "data_time": 0.0481, "decode.loss_ce": 2.1724, "decode.acc_seg": 33.06708, "loss": 2.1724, "time": 0.19876}
{"mode": "train", "epoch": 5, "iter": 550, "lr": 0.00011, "memory": 1942, "data_time": 0.00595, "decode.loss_ce": 1.79648, "decode.acc_seg": 38.18496, "loss": 1.79648, "time": 0.1532}
{"mode": "train", "epoch": 5, "iter": 600, "lr": 0.00012, "memory": 1942, "data_time": 0.00597, "decode.loss_ce": 2.15338, "decode.acc_seg": 29.6548, "loss": 2.15338, "time": 0.15844}
{"mode": "train", "epoch": 6, "iter": 650, "lr": 0.00013, "memory": 1942, "data_time": 0.04795, "decode.loss_ce": 1.84527, "decode.acc_seg": 38.31996, "loss": 1.84527, "time": 0.19999}
{"mode": "train", "epoch": 6, "iter": 700, "lr": 0.00013, "memory": 1942, "data_time": 0.00781, "decode.loss_ce": 1.91505, "decode.acc_seg": 35.74929, "loss": 1.91505, "time": 0.15667}
{"mode": "train", "epoch": 7, "iter": 750, "lr": 0.00014, "memory": 1942, "data_time": 0.04756, "decode.loss_ce": 2.06896, "decode.acc_seg": 34.84201, "loss": 2.06896, "time": 0.19895}
{"mode": "train", "epoch": 7, "iter": 800, "lr": 0.00015, "memory": 1942, "data_time": 0.00689, "decode.loss_ce": 1.75311, "decode.acc_seg": 41.12541, "loss": 1.75311, "time": 0.15564}
{"mode": "train", "epoch": 8, "iter": 850, "lr": 0.00016, "memory": 1942, "data_time": 0.04773, "decode.loss_ce": 1.94366, "decode.acc_seg": 36.14291, "loss": 1.94366, "time": 0.20436}
{"mode": "train", "epoch": 8, "iter": 900, "lr": 0.00017, "memory": 1942, "data_time": 0.00656, "decode.loss_ce": 1.60773, "decode.acc_seg": 44.6369, "loss": 1.60773, "time": 0.1594}
{"mode": "train", "epoch": 8, "iter": 950, "lr": 0.00018, "memory": 1942, "data_time": 0.00502, "decode.loss_ce": 1.87749, "decode.acc_seg": 37.98106, "loss": 1.87749, "time": 0.15972}
{"mode": "train", "epoch": 9, "iter": 1000, "lr": 0.00019, "memory": 1942, "data_time": 0.04702, "decode.loss_ce": 1.9306, "decode.acc_seg": 38.15352, "loss": 1.9306, "time": 0.20263}
{"mode": "train", "epoch": 9, "iter": 1050, "lr": 0.0002, "memory": 1942, "data_time": 0.00344, "decode.loss_ce": 1.78276, "decode.acc_seg": 43.23932, "loss": 1.78276, "time": 0.15617}
{"mode": "train", "epoch": 10, "iter": 1100, "lr": 0.00021, "memory": 1942, "data_time": 0.04728, "decode.loss_ce": 1.78841, "decode.acc_seg": 39.01263, "loss": 1.78841, "time": 0.19969}
{"mode": "train", "epoch": 10, "iter": 1150, "lr": 0.00022, "memory": 1942, "data_time": 0.00624, "decode.loss_ce": 1.51476, "decode.acc_seg": 49.38603, "loss": 1.51476, "time": 0.15496}
{"mode": "train", "epoch": 10, "iter": 1200, "lr": 0.00023, "memory": 1942, "data_time": 0.00757, "decode.loss_ce": 1.92458, "decode.acc_seg": 35.61584, "loss": 1.92458, "time": 0.15435}
{"mode": "train", "epoch": 11, "iter": 1250, "lr": 0.00023, "memory": 1942, "data_time": 0.0476, "decode.loss_ce": 1.71968, "decode.acc_seg": 43.06748, "loss": 1.71968, "time": 0.19982}
{"mode": "train", "epoch": 11, "iter": 1300, "lr": 0.00024, "memory": 1942, "data_time": 0.00629, "decode.loss_ce": 1.77178, "decode.acc_seg": 42.50353, "loss": 1.77178, "time": 0.15539}
{"mode": "train", "epoch": 12, "iter": 1350, "lr": 0.00025, "memory": 1942, "data_time": 0.04931, "decode.loss_ce": 1.93773, "decode.acc_seg": 38.59353, "loss": 1.93773, "time": 0.20016}
{"mode": "train", "epoch": 12, "iter": 1400, "lr": 0.00026, "memory": 1942, "data_time": 0.00625, "decode.loss_ce": 1.66099, "decode.acc_seg": 47.51875, "loss": 1.66099, "time": 0.15644}
{"mode": "train", "epoch": 13, "iter": 1450, "lr": 0.00027, "memory": 1942, "data_time": 0.04963, "decode.loss_ce": 1.72511, "decode.acc_seg": 39.34665, "loss": 1.72511, "time": 0.20345}
{"mode": "train", "epoch": 13, "iter": 1500, "lr": 0.00028, "memory": 1942, "data_time": 0.00594, "decode.loss_ce": 1.5726, "decode.acc_seg": 47.79754, "loss": 1.5726, "time": 0.15401}
{"mode": "train", "epoch": 13, "iter": 1550, "lr": 0.00028, "memory": 1942, "data_time": 0.00502, "decode.loss_ce": 1.68953, "decode.acc_seg": 41.84863, "loss": 1.68953, "time": 0.159}
{"mode": "train", "epoch": 14, "iter": 1600, "lr": 0.00028, "memory": 1942, "data_time": 0.04875, "decode.loss_ce": 1.84424, "decode.acc_seg": 40.13237, "loss": 1.84424, "time": 0.20451}
{"mode": "train", "epoch": 14, "iter": 1650, "lr": 0.00028, "memory": 1942, "data_time": 0.00872, "decode.loss_ce": 1.57741, "decode.acc_seg": 47.71867, "loss": 1.57741, "time": 0.15579}
{"mode": "train", "epoch": 15, "iter": 1700, "lr": 0.00027, "memory": 1942, "data_time": 0.0479, "decode.loss_ce": 1.73933, "decode.acc_seg": 41.52273, "loss": 1.73933, "time": 0.20037}
{"mode": "train", "epoch": 15, "iter": 1750, "lr": 0.00027, "memory": 1942, "data_time": 0.00532, "decode.loss_ce": 1.35414, "decode.acc_seg": 54.68973, "loss": 1.35414, "time": 0.15714}
{"mode": "train", "epoch": 15, "iter": 1800, "lr": 0.00027, "memory": 1942, "data_time": 0.00562, "decode.loss_ce": 1.77904, "decode.acc_seg": 38.24897, "loss": 1.77904, "time": 0.15465}
{"mode": "train", "epoch": 16, "iter": 1850, "lr": 0.00027, "memory": 1942, "data_time": 0.04894, "decode.loss_ce": 1.59712, "decode.acc_seg": 46.86217, "loss": 1.59712, "time": 0.20261}
{"mode": "train", "epoch": 16, "iter": 1900, "lr": 0.00027, "memory": 1942, "data_time": 0.00753, "decode.loss_ce": 1.57058, "decode.acc_seg": 45.90414, "loss": 1.57058, "time": 0.15424}
{"mode": "train", "epoch": 17, "iter": 1950, "lr": 0.00027, "memory": 1942, "data_time": 0.04866, "decode.loss_ce": 1.76951, "decode.acc_seg": 41.2351, "loss": 1.76951, "time": 0.20243}
{"mode": "train", "epoch": 17, "iter": 2000, "lr": 0.00027, "memory": 1942, "data_time": 0.00533, "decode.loss_ce": 1.46995, "decode.acc_seg": 51.48414, "loss": 1.46995, "time": 0.16284}

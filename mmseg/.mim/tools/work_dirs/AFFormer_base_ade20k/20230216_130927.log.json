{"env_info": "sys.platform: win32\nPython: 3.8.10 (default, May 19 2021, 13:12:57) [MSC v.1916 64 bit (AMD64)]\nCUDA available: True\nGPU 0: NVIDIA GeForce RTX 3060 Laptop GPU\nCUDA_HOME: C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.1\nNVCC: Cuda compilation tools, release 11.1, V11.1.105\nMSVC: \u7528\u4e8e x64 \u7684 Microsoft (R) C/C++ \u4f18\u5316\u7f16\u8bd1\u5668 19.29.30138 \u7248\nGCC: n/a\nPyTorch: 1.8.0+cu111\nPyTorch compiling details: PyTorch built with:\n  - C++ Version: 199711\n  - MSVC 192829337\n  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v1.7.0 (Git Hash 7aed236906b1f7a05c0917e5257a1af05e9ff683)\n  - OpenMP 2019\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.1\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.0.5\n  - Magma 2.5.4\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=C:/w/b/windows/tmp_bin/sccache-cl.exe, CXX_FLAGS=/DWIN32 /D_WINDOWS /GR /EHsc /w /bigobj -DUSE_PTHREADPOOL -openmp:experimental -DNDEBUG -DUSE_FBGEMM -DUSE_XNNPACK, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.8.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=OFF, USE_NNPACK=OFF, USE_OPENMP=ON, \n\nTorchVision: 0.9.0+cu111\nOpenCV: 4.6.0\nMMCV: 1.5.0\nMMCV Compiler: MSVC 192930138\nMMCV CUDA Compiler: 11.1\nMMSegmentation: 0.21.1+", "seed": 1035209647, "exp_name": "AFFormer_base_ade20k.py", "mmseg_version": "0.21.1+", "config": "norm_cfg = dict(type='SyncBN', requires_grad=True)\nham_norm_cfg = dict(type='GN', num_groups=32, requires_grad=True)\nmodel = dict(\n    type='EncoderDecoder',\n    pretrained=\n    'E:/5.23/2.13-2.20/2.15/AFFormer-main/pretained_weight/AFFormer_base_ImageNet1k.pth',\n    backbone=dict(\n        type='afformer_base',\n        strides=[4, 2, 2, 2],\n        pretrained=\n        'E:/5.23/2.13-2.20/2.15/AFFormer-main/pretained_weight/AFFormer_base_ImageNet1k.pth'\n    ),\n    decode_head=dict(\n        type='CLS',\n        in_channels=[216],\n        in_index=[3],\n        channels=256,\n        aff_channels=256,\n        dropout_ratio=0.1,\n        num_classes=150,\n        norm_cfg=dict(type='GN', num_groups=32, requires_grad=True),\n        align_corners=False,\n        loss_decode=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n        aff_kwargs=dict(MD_R=16)),\n    train_cfg=dict(),\n    test_cfg=dict(mode='whole'))\ndataset_type = 'ADE20KDataset'\ndata_root = 'G:/AI/data/ade20k'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ncrop_size = (256, 256)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', reduce_zero_label=True),\n    dict(type='Resize', img_scale=(256, 256), ratio_range=(0.5, 2.0)),\n    dict(type='RandomCrop', crop_size=(256, 256), cat_max_ratio=0.75),\n    dict(type='RandomFlip', prob=0.5),\n    dict(type='PhotoMetricDistortion'),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size=(256, 256), pad_val=0, seg_pad_val=255),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n]\nval_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(256, 256),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(256, 256),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='ResizeToMultiple', size_divisor=32),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=8,\n    workers_per_gpu=8,\n    train=dict(\n        type='RepeatDataset',\n        times=50,\n        dataset=dict(\n            type='ADE20KDataset',\n            data_root='G:/AI/data/ade20k',\n            img_dir='images/training',\n            ann_dir='annotations/training',\n            pipeline=[\n                dict(type='LoadImageFromFile'),\n                dict(type='LoadAnnotations', reduce_zero_label=True),\n                dict(\n                    type='Resize',\n                    img_scale=(256, 256),\n                    ratio_range=(0.5, 2.0)),\n                dict(\n                    type='RandomCrop',\n                    crop_size=(256, 256),\n                    cat_max_ratio=0.75),\n                dict(type='RandomFlip', prob=0.5),\n                dict(type='PhotoMetricDistortion'),\n                dict(\n                    type='Normalize',\n                    mean=[123.675, 116.28, 103.53],\n                    std=[58.395, 57.12, 57.375],\n                    to_rgb=True),\n                dict(type='Pad', size=(256, 256), pad_val=0, seg_pad_val=255),\n                dict(type='DefaultFormatBundle'),\n                dict(type='Collect', keys=['img', 'gt_semantic_seg'])\n            ])),\n    val=dict(\n        type='ADE20KDataset',\n        data_root='G:/AI/data/ade20k',\n        img_dir='images/validation',\n        ann_dir='annotations/validation',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(256, 256),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='ADE20KDataset',\n        data_root='G:/AI/data/ade20k',\n        img_dir='images/validation',\n        ann_dir='annotations/validation',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(256, 256),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='ResizeToMultiple', size_divisor=32),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nlog_config = dict(\n    interval=50, hooks=[dict(type='TextLoggerHook', by_epoch=False)])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\ncudnn_benchmark = True\noptimizer = dict(\n    type='AdamW', lr=0.0003, betas=(0.9, 0.999), weight_decay=0.01)\noptimizer_config = dict()\nlr_config = dict(\n    policy='poly',\n    warmup='linear',\n    warmup_iters=1500,\n    warmup_ratio=1e-06,\n    power=1.0,\n    min_lr=0.0,\n    by_epoch=False)\nrunner = dict(type='IterBasedRunner', max_iters=160000)\ncheckpoint_config = dict(by_epoch=False, interval=16000)\nevaluation = dict(interval=5000, metric='mIoU', pre_eval=True)\nfind_unused_parameters = True\nwork_dir = './work_dirs\\AFFormer_base_ade20k'\ngpu_ids = [0]\nauto_resume = False\nseed = 1035209647\n", "CLASSES": ["wall", "building", "sky", "floor", "tree", "ceiling", "road", "bed ", "windowpane", "grass", "cabinet", "sidewalk", "person", "earth", "door", "table", "mountain", "plant", "curtain", "chair", "car", "water", "painting", "sofa", "shelf", "house", "sea", "mirror", "rug", "field", "armchair", "seat", "fence", "desk", "rock", "wardrobe", "lamp", "bathtub", "railing", "cushion", "base", "box", "column", "signboard", "chest of drawers", "counter", "sand", "sink", "skyscraper", "fireplace", "refrigerator", "grandstand", "path", "stairs", "runway", "case", "pool table", "pillow", "screen door", "stairway", "river", "bridge", "bookcase", "blind", "coffee table", "toilet", "flower", "book", "hill", "bench", "countertop", "stove", "palm", "kitchen island", "computer", "swivel chair", "boat", "bar", "arcade machine", "hovel", "bus", "towel", "light", "truck", "tower", "chandelier", "awning", "streetlight", "booth", "television receiver", "airplane", "dirt track", "apparel", "pole", "land", "bannister", "escalator", "ottoman", "bottle", "buffet", "poster", "stage", "van", "ship", "fountain", "conveyer belt", "canopy", "washer", "plaything", "swimming pool", "stool", "barrel", "basket", "waterfall", "tent", "bag", "minibike", "cradle", "oven", "ball", "food", "step", "tank", "trade name", "microwave", "pot", "animal", "bicycle", "lake", "dishwasher", "screen", "blanket", "sculpture", "hood", "sconce", "vase", "traffic light", "tray", "ashcan", "fan", "pier", "crt screen", "plate", "monitor", "bulletin board", "shower", "radiator", "glass", "clock", "flag"], "PALETTE": [[120, 120, 120], [180, 120, 120], [6, 230, 230], [80, 50, 50], [4, 200, 3], [120, 120, 80], [140, 140, 140], [204, 5, 255], [230, 230, 230], [4, 250, 7], [224, 5, 255], [235, 255, 7], [150, 5, 61], [120, 120, 70], [8, 255, 51], [255, 6, 82], [143, 255, 140], [204, 255, 4], [255, 51, 7], [204, 70, 3], [0, 102, 200], [61, 230, 250], [255, 6, 51], [11, 102, 255], [255, 7, 71], [255, 9, 224], [9, 7, 230], [220, 220, 220], [255, 9, 92], [112, 9, 255], [8, 255, 214], [7, 255, 224], [255, 184, 6], [10, 255, 71], [255, 41, 10], [7, 255, 255], [224, 255, 8], [102, 8, 255], [255, 61, 6], [255, 194, 7], [255, 122, 8], [0, 255, 20], [255, 8, 41], [255, 5, 153], [6, 51, 255], [235, 12, 255], [160, 150, 20], [0, 163, 255], [140, 140, 140], [250, 10, 15], [20, 255, 0], [31, 255, 0], [255, 31, 0], [255, 224, 0], [153, 255, 0], [0, 0, 255], [255, 71, 0], [0, 235, 255], [0, 173, 255], [31, 0, 255], [11, 200, 200], [255, 82, 0], [0, 255, 245], [0, 61, 255], [0, 255, 112], [0, 255, 133], [255, 0, 0], [255, 163, 0], [255, 102, 0], [194, 255, 0], [0, 143, 255], [51, 255, 0], [0, 82, 255], [0, 255, 41], [0, 255, 173], [10, 0, 255], [173, 255, 0], [0, 255, 153], [255, 92, 0], [255, 0, 255], [255, 0, 245], [255, 0, 102], [255, 173, 0], [255, 0, 20], [255, 184, 184], [0, 31, 255], [0, 255, 61], [0, 71, 255], [255, 0, 204], [0, 255, 194], [0, 255, 82], [0, 10, 255], [0, 112, 255], [51, 0, 255], [0, 194, 255], [0, 122, 255], [0, 255, 163], [255, 153, 0], [0, 255, 10], [255, 112, 0], [143, 255, 0], [82, 0, 255], [163, 255, 0], [255, 235, 0], [8, 184, 170], [133, 0, 255], [0, 255, 92], [184, 0, 255], [255, 0, 31], [0, 184, 255], [0, 214, 255], [255, 0, 112], [92, 255, 0], [0, 224, 255], [112, 224, 255], [70, 184, 160], [163, 0, 255], [153, 0, 255], [71, 255, 0], [255, 0, 163], [255, 204, 0], [255, 0, 143], [0, 255, 235], [133, 255, 0], [255, 0, 235], [245, 0, 255], [255, 0, 122], [255, 245, 0], [10, 190, 212], [214, 255, 0], [0, 204, 255], [20, 0, 255], [255, 255, 0], [0, 153, 255], [0, 41, 255], [0, 255, 204], [41, 0, 255], [41, 255, 0], [173, 0, 255], [0, 245, 255], [71, 0, 255], [122, 0, 255], [0, 255, 184], [0, 92, 255], [184, 255, 0], [0, 133, 255], [255, 214, 0], [25, 194, 194], [102, 255, 0], [92, 0, 255]]}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 1e-05, "memory": 1942, "data_time": 0.00962, "decode.loss_ce": 3.76839, "decode.acc_seg": 2.70224, "loss": 3.76839, "time": 0.20842}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 2e-05, "memory": 1942, "data_time": 0.00411, "decode.loss_ce": 3.73164, "decode.acc_seg": 10.56956, "loss": 3.73164, "time": 0.16389}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 3e-05, "memory": 1942, "data_time": 0.0041, "decode.loss_ce": 3.45384, "decode.acc_seg": 19.93797, "loss": 3.45384, "time": 0.16309}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 4e-05, "memory": 1942, "data_time": 0.00657, "decode.loss_ce": 3.3533, "decode.acc_seg": 24.63857, "loss": 3.3533, "time": 0.15536}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 5e-05, "memory": 1942, "data_time": 0.00721, "decode.loss_ce": 2.98164, "decode.acc_seg": 25.54139, "loss": 2.98164, "time": 0.15518}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 6e-05, "memory": 1942, "data_time": 0.00472, "decode.loss_ce": 2.77538, "decode.acc_seg": 33.68769, "loss": 2.77538, "time": 0.1545}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 7e-05, "memory": 1942, "data_time": 0.00689, "decode.loss_ce": 2.52197, "decode.acc_seg": 25.08488, "loss": 2.52197, "time": 0.15448}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 8e-05, "memory": 1942, "data_time": 0.0069, "decode.loss_ce": 2.3637, "decode.acc_seg": 34.35771, "loss": 2.3637, "time": 0.15312}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 9e-05, "memory": 1942, "data_time": 0.00628, "decode.loss_ce": 2.19909, "decode.acc_seg": 30.87947, "loss": 2.19909, "time": 0.15637}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 0.0001, "memory": 1942, "data_time": 0.00624, "decode.loss_ce": 2.25501, "decode.acc_seg": 34.55445, "loss": 2.25501, "time": 0.15433}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 0.00011, "memory": 1942, "data_time": 0.00624, "decode.loss_ce": 1.79959, "decode.acc_seg": 39.19925, "loss": 1.79959, "time": 0.15497}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 0.00012, "memory": 1942, "data_time": 0.00751, "decode.loss_ce": 2.14524, "decode.acc_seg": 29.65697, "loss": 2.14524, "time": 0.15849}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 0.00013, "memory": 1942, "data_time": 0.00502, "decode.loss_ce": 1.89277, "decode.acc_seg": 38.53243, "loss": 1.89277, "time": 0.156}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 0.00014, "memory": 1942, "data_time": 0.00759, "decode.loss_ce": 1.95014, "decode.acc_seg": 35.15598, "loss": 1.95014, "time": 0.15727}
{"mode": "train", "epoch": 1, "iter": 750, "lr": 0.00015, "memory": 1942, "data_time": 0.00531, "decode.loss_ce": 2.05693, "decode.acc_seg": 35.58541, "loss": 2.05693, "time": 0.158}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 0.00016, "memory": 1942, "data_time": 0.0078, "decode.loss_ce": 1.82031, "decode.acc_seg": 40.42098, "loss": 1.82031, "time": 0.15716}
{"mode": "train", "epoch": 1, "iter": 850, "lr": 0.00017, "memory": 1942, "data_time": 0.00503, "decode.loss_ce": 1.9464, "decode.acc_seg": 35.72498, "loss": 1.9464, "time": 0.15821}
{"mode": "train", "epoch": 1, "iter": 900, "lr": 0.00018, "memory": 1942, "data_time": 0.00561, "decode.loss_ce": 1.61619, "decode.acc_seg": 43.91525, "loss": 1.61619, "time": 0.15757}
{"mode": "train", "epoch": 1, "iter": 950, "lr": 0.00019, "memory": 1942, "data_time": 0.01029, "decode.loss_ce": 1.87037, "decode.acc_seg": 36.69076, "loss": 1.87037, "time": 0.15761}
{"mode": "train", "epoch": 1, "iter": 1000, "lr": 0.0002, "memory": 1942, "data_time": 0.00531, "decode.loss_ce": 1.95056, "decode.acc_seg": 37.13636, "loss": 1.95056, "time": 0.15532}
{"mode": "train", "epoch": 1, "iter": 1050, "lr": 0.00021, "memory": 1942, "data_time": 0.00719, "decode.loss_ce": 1.74671, "decode.acc_seg": 42.06767, "loss": 1.74671, "time": 0.15769}
{"mode": "train", "epoch": 1, "iter": 1100, "lr": 0.00022, "memory": 1942, "data_time": 0.00813, "decode.loss_ce": 1.90511, "decode.acc_seg": 37.07224, "loss": 1.90511, "time": 0.15811}
{"mode": "train", "epoch": 1, "iter": 1150, "lr": 0.00023, "memory": 1942, "data_time": 0.00763, "decode.loss_ce": 1.57183, "decode.acc_seg": 48.27306, "loss": 1.57183, "time": 0.15935}
{"mode": "train", "epoch": 1, "iter": 1200, "lr": 0.00024, "memory": 1942, "data_time": 0.00654, "decode.loss_ce": 1.97249, "decode.acc_seg": 34.63201, "loss": 1.97249, "time": 0.15908}
{"mode": "train", "epoch": 1, "iter": 1250, "lr": 0.00025, "memory": 1942, "data_time": 0.00746, "decode.loss_ce": 1.72097, "decode.acc_seg": 43.04779, "loss": 1.72097, "time": 0.15713}
{"mode": "train", "epoch": 1, "iter": 1300, "lr": 0.00026, "memory": 1942, "data_time": 0.00812, "decode.loss_ce": 1.71826, "decode.acc_seg": 41.89376, "loss": 1.71826, "time": 0.15692}
{"mode": "train", "epoch": 1, "iter": 1350, "lr": 0.00027, "memory": 1942, "data_time": 0.00815, "decode.loss_ce": 1.7954, "decode.acc_seg": 38.22705, "loss": 1.7954, "time": 0.16118}
{"mode": "train", "epoch": 1, "iter": 1400, "lr": 0.00028, "memory": 1942, "data_time": 0.00812, "decode.loss_ce": 1.6283, "decode.acc_seg": 46.18943, "loss": 1.6283, "time": 0.15904}
{"mode": "train", "epoch": 1, "iter": 1450, "lr": 0.00029, "memory": 1942, "data_time": 0.00595, "decode.loss_ce": 1.82053, "decode.acc_seg": 38.13578, "loss": 1.82053, "time": 0.15634}
{"mode": "train", "epoch": 1, "iter": 1500, "lr": 0.0003, "memory": 1942, "data_time": 0.00782, "decode.loss_ce": 1.54325, "decode.acc_seg": 48.58364, "loss": 1.54325, "time": 0.15488}
{"mode": "train", "epoch": 1, "iter": 1550, "lr": 0.0003, "memory": 1942, "data_time": 0.00847, "decode.loss_ce": 1.72182, "decode.acc_seg": 40.38708, "loss": 1.72182, "time": 0.15772}
{"mode": "train", "epoch": 1, "iter": 1600, "lr": 0.0003, "memory": 1942, "data_time": 0.00563, "decode.loss_ce": 1.9074, "decode.acc_seg": 40.2368, "loss": 1.9074, "time": 0.15551}
{"mode": "train", "epoch": 1, "iter": 1650, "lr": 0.0003, "memory": 1942, "data_time": 0.00758, "decode.loss_ce": 1.56355, "decode.acc_seg": 45.90837, "loss": 1.56355, "time": 0.15872}
{"mode": "train", "epoch": 1, "iter": 1700, "lr": 0.0003, "memory": 1942, "data_time": 0.00785, "decode.loss_ce": 1.80154, "decode.acc_seg": 39.00359, "loss": 1.80154, "time": 0.16009}
{"mode": "train", "epoch": 1, "iter": 1750, "lr": 0.0003, "memory": 1942, "data_time": 0.00564, "decode.loss_ce": 1.39916, "decode.acc_seg": 53.01411, "loss": 1.39916, "time": 0.16097}
{"mode": "train", "epoch": 1, "iter": 1800, "lr": 0.0003, "memory": 1942, "data_time": 0.00486, "decode.loss_ce": 1.83478, "decode.acc_seg": 37.1064, "loss": 1.83478, "time": 0.17056}
{"mode": "train", "epoch": 1, "iter": 1850, "lr": 0.0003, "memory": 1942, "data_time": 0.00348, "decode.loss_ce": 1.60634, "decode.acc_seg": 45.10272, "loss": 1.60634, "time": 0.16625}
{"mode": "train", "epoch": 1, "iter": 1900, "lr": 0.0003, "memory": 1942, "data_time": 0.00406, "decode.loss_ce": 1.6836, "decode.acc_seg": 44.03022, "loss": 1.6836, "time": 0.16715}
{"mode": "train", "epoch": 1, "iter": 1950, "lr": 0.0003, "memory": 1942, "data_time": 0.00519, "decode.loss_ce": 1.6895, "decode.acc_seg": 41.33212, "loss": 1.6895, "time": 0.17667}
{"mode": "train", "epoch": 1, "iter": 2000, "lr": 0.0003, "memory": 1942, "data_time": 0.00393, "decode.loss_ce": 1.5722, "decode.acc_seg": 49.90206, "loss": 1.5722, "time": 0.16746}
{"mode": "train", "epoch": 1, "iter": 2050, "lr": 0.0003, "memory": 1942, "data_time": 0.00346, "decode.loss_ce": 1.71792, "decode.acc_seg": 41.16436, "loss": 1.71792, "time": 0.16625}
{"mode": "train", "epoch": 1, "iter": 2100, "lr": 0.0003, "memory": 1942, "data_time": 0.00568, "decode.loss_ce": 1.50257, "decode.acc_seg": 50.09815, "loss": 1.50257, "time": 0.16768}
{"mode": "train", "epoch": 1, "iter": 2150, "lr": 0.0003, "memory": 1942, "data_time": 0.00593, "decode.loss_ce": 1.62176, "decode.acc_seg": 43.30375, "loss": 1.62176, "time": 0.1687}
{"mode": "train", "epoch": 1, "iter": 2200, "lr": 0.0003, "memory": 1942, "data_time": 0.00342, "decode.loss_ce": 1.78516, "decode.acc_seg": 41.54631, "loss": 1.78516, "time": 0.16984}
{"mode": "train", "epoch": 1, "iter": 2250, "lr": 0.0003, "memory": 1942, "data_time": 0.00359, "decode.loss_ce": 1.59899, "decode.acc_seg": 48.08522, "loss": 1.59899, "time": 0.16622}
{"mode": "train", "epoch": 1, "iter": 2300, "lr": 0.0003, "memory": 1942, "data_time": 0.00306, "decode.loss_ce": 1.59932, "decode.acc_seg": 43.62049, "loss": 1.59932, "time": 0.16849}
{"mode": "train", "epoch": 1, "iter": 2350, "lr": 0.0003, "memory": 1942, "data_time": 0.00311, "decode.loss_ce": 1.31987, "decode.acc_seg": 54.69575, "loss": 1.31987, "time": 0.16933}
{"mode": "train", "epoch": 1, "iter": 2400, "lr": 0.0003, "memory": 1942, "data_time": 0.00278, "decode.loss_ce": 1.77302, "decode.acc_seg": 40.12616, "loss": 1.77302, "time": 0.16686}
{"mode": "train", "epoch": 1, "iter": 2450, "lr": 0.0003, "memory": 1942, "data_time": 0.00515, "decode.loss_ce": 1.57163, "decode.acc_seg": 46.90931, "loss": 1.57163, "time": 0.16542}
{"mode": "train", "epoch": 1, "iter": 2500, "lr": 0.0003, "memory": 1942, "data_time": 0.00291, "decode.loss_ce": 1.54375, "decode.acc_seg": 46.78046, "loss": 1.54375, "time": 0.17031}
{"mode": "train", "epoch": 1, "iter": 2550, "lr": 0.0003, "memory": 1942, "data_time": 0.00569, "decode.loss_ce": 1.648, "decode.acc_seg": 42.99749, "loss": 1.648, "time": 0.16551}
{"mode": "train", "epoch": 1, "iter": 2600, "lr": 0.0003, "memory": 1942, "data_time": 0.00439, "decode.loss_ce": 1.39046, "decode.acc_seg": 52.09033, "loss": 1.39046, "time": 0.16648}
{"mode": "train", "epoch": 1, "iter": 2650, "lr": 0.0003, "memory": 1942, "data_time": 0.00131, "decode.loss_ce": 1.58639, "decode.acc_seg": 44.79547, "loss": 1.58639, "time": 0.17247}
{"mode": "train", "epoch": 1, "iter": 2700, "lr": 0.00029, "memory": 1942, "data_time": 0.00479, "decode.loss_ce": 1.37796, "decode.acc_seg": 54.09127, "loss": 1.37796, "time": 0.1689}
{"mode": "train", "epoch": 1, "iter": 2750, "lr": 0.00029, "memory": 1942, "data_time": 0.00316, "decode.loss_ce": 1.51217, "decode.acc_seg": 46.56575, "loss": 1.51217, "time": 0.16458}
{"mode": "train", "epoch": 1, "iter": 2800, "lr": 0.00029, "memory": 1942, "data_time": 0.00362, "decode.loss_ce": 1.63471, "decode.acc_seg": 45.42423, "loss": 1.63471, "time": 0.1689}
{"mode": "train", "epoch": 1, "iter": 2850, "lr": 0.00029, "memory": 1942, "data_time": 0.00526, "decode.loss_ce": 1.39608, "decode.acc_seg": 51.16876, "loss": 1.39608, "time": 0.17115}
{"mode": "train", "epoch": 1, "iter": 2900, "lr": 0.00029, "memory": 1942, "data_time": 0.00441, "decode.loss_ce": 1.47605, "decode.acc_seg": 46.92912, "loss": 1.47605, "time": 0.1688}
{"mode": "train", "epoch": 1, "iter": 2950, "lr": 0.00029, "memory": 1942, "data_time": 0.00381, "decode.loss_ce": 1.21606, "decode.acc_seg": 57.57408, "loss": 1.21606, "time": 0.16742}
{"mode": "train", "epoch": 1, "iter": 3000, "lr": 0.00029, "memory": 1942, "data_time": 0.00284, "decode.loss_ce": 1.53282, "decode.acc_seg": 42.56411, "loss": 1.53282, "time": 0.17012}
{"mode": "train", "epoch": 1, "iter": 3050, "lr": 0.00029, "memory": 1942, "data_time": 0.0033, "decode.loss_ce": 1.4348, "decode.acc_seg": 49.72764, "loss": 1.4348, "time": 0.16913}
{"mode": "train", "epoch": 1, "iter": 3100, "lr": 0.00029, "memory": 1942, "data_time": 0.00391, "decode.loss_ce": 1.45566, "decode.acc_seg": 49.29192, "loss": 1.45566, "time": 0.16829}
{"mode": "train", "epoch": 1, "iter": 3150, "lr": 0.00029, "memory": 1942, "data_time": 0.00393, "decode.loss_ce": 1.56991, "decode.acc_seg": 45.57866, "loss": 1.56991, "time": 0.16561}
{"mode": "train", "epoch": 1, "iter": 3200, "lr": 0.00029, "memory": 1942, "data_time": 0.00374, "decode.loss_ce": 1.33641, "decode.acc_seg": 54.07191, "loss": 1.33641, "time": 0.16792}
{"mode": "train", "epoch": 1, "iter": 3250, "lr": 0.00029, "memory": 1942, "data_time": 0.00386, "decode.loss_ce": 1.47676, "decode.acc_seg": 46.73448, "loss": 1.47676, "time": 0.17143}
{"mode": "train", "epoch": 1, "iter": 3300, "lr": 0.00029, "memory": 1942, "data_time": 0.00397, "decode.loss_ce": 1.26741, "decode.acc_seg": 56.35125, "loss": 1.26741, "time": 0.16808}
{"mode": "train", "epoch": 1, "iter": 3350, "lr": 0.00029, "memory": 1942, "data_time": 0.00598, "decode.loss_ce": 1.43485, "decode.acc_seg": 48.22206, "loss": 1.43485, "time": 0.1699}
{"mode": "train", "epoch": 1, "iter": 3400, "lr": 0.00029, "memory": 1942, "data_time": 0.00279, "decode.loss_ce": 1.51307, "decode.acc_seg": 48.0797, "loss": 1.51307, "time": 0.16876}
{"mode": "train", "epoch": 1, "iter": 3450, "lr": 0.00029, "memory": 1942, "data_time": 0.00344, "decode.loss_ce": 1.27148, "decode.acc_seg": 53.68765, "loss": 1.27148, "time": 0.16738}
{"mode": "train", "epoch": 1, "iter": 3500, "lr": 0.00029, "memory": 1942, "data_time": 0.00348, "decode.loss_ce": 1.45895, "decode.acc_seg": 49.04751, "loss": 1.45895, "time": 0.1707}
{"mode": "train", "epoch": 1, "iter": 3550, "lr": 0.00029, "memory": 1942, "data_time": 0.00459, "decode.loss_ce": 1.15987, "decode.acc_seg": 61.85247, "loss": 1.15987, "time": 0.17107}
{"mode": "train", "epoch": 1, "iter": 3600, "lr": 0.00029, "memory": 1942, "data_time": 0.00519, "decode.loss_ce": 1.45186, "decode.acc_seg": 46.52745, "loss": 1.45186, "time": 0.17504}
{"mode": "train", "epoch": 1, "iter": 3650, "lr": 0.00029, "memory": 1942, "data_time": 0.00344, "decode.loss_ce": 1.354, "decode.acc_seg": 52.22442, "loss": 1.354, "time": 0.16985}
{"mode": "train", "epoch": 1, "iter": 3700, "lr": 0.00029, "memory": 1942, "data_time": 0.00236, "decode.loss_ce": 1.28895, "decode.acc_seg": 51.76128, "loss": 1.28895, "time": 0.1675}
{"mode": "train", "epoch": 1, "iter": 3750, "lr": 0.00029, "memory": 1942, "data_time": 0.00396, "decode.loss_ce": 1.44536, "decode.acc_seg": 48.86108, "loss": 1.44536, "time": 0.16941}
{"mode": "train", "epoch": 1, "iter": 3800, "lr": 0.00029, "memory": 1942, "data_time": 0.00537, "decode.loss_ce": 1.19883, "decode.acc_seg": 58.34935, "loss": 1.19883, "time": 0.16795}
{"mode": "train", "epoch": 1, "iter": 3850, "lr": 0.00029, "memory": 1942, "data_time": 0.00417, "decode.loss_ce": 1.33001, "decode.acc_seg": 50.06354, "loss": 1.33001, "time": 0.17761}
{"mode": "train", "epoch": 1, "iter": 3900, "lr": 0.00029, "memory": 1942, "data_time": 0.00457, "decode.loss_ce": 1.24507, "decode.acc_seg": 57.94556, "loss": 1.24507, "time": 0.16855}
{"mode": "train", "epoch": 1, "iter": 3950, "lr": 0.00029, "memory": 1942, "data_time": 0.00494, "decode.loss_ce": 1.26651, "decode.acc_seg": 51.59069, "loss": 1.26651, "time": 0.17054}
{"mode": "train", "epoch": 1, "iter": 4000, "lr": 0.00029, "memory": 1942, "data_time": 0.00337, "decode.loss_ce": 1.35781, "decode.acc_seg": 49.87369, "loss": 1.35781, "time": 0.1669}
{"mode": "train", "epoch": 1, "iter": 4050, "lr": 0.00029, "memory": 1942, "data_time": 0.005, "decode.loss_ce": 1.20637, "decode.acc_seg": 56.69907, "loss": 1.20637, "time": 0.16874}
{"mode": "train", "epoch": 1, "iter": 4100, "lr": 0.00029, "memory": 1942, "data_time": 0.00266, "decode.loss_ce": 1.30913, "decode.acc_seg": 51.68528, "loss": 1.30913, "time": 0.16539}
{"mode": "train", "epoch": 1, "iter": 4150, "lr": 0.00029, "memory": 1942, "data_time": 0.00392, "decode.loss_ce": 1.07066, "decode.acc_seg": 62.24703, "loss": 1.07066, "time": 0.16632}
{"mode": "train", "epoch": 1, "iter": 4200, "lr": 0.00029, "memory": 1942, "data_time": 0.00461, "decode.loss_ce": 1.35646, "decode.acc_seg": 48.17434, "loss": 1.35646, "time": 0.16975}
{"mode": "train", "epoch": 1, "iter": 4250, "lr": 0.00029, "memory": 1942, "data_time": 0.00487, "decode.loss_ce": 1.22141, "decode.acc_seg": 54.59805, "loss": 1.22141, "time": 0.1687}
{"mode": "train", "epoch": 1, "iter": 4300, "lr": 0.00029, "memory": 1942, "data_time": 0.00584, "decode.loss_ce": 1.21786, "decode.acc_seg": 55.06545, "loss": 1.21786, "time": 0.17076}
{"mode": "train", "epoch": 1, "iter": 4350, "lr": 0.00029, "memory": 1942, "data_time": 0.0046, "decode.loss_ce": 1.31582, "decode.acc_seg": 51.1803, "loss": 1.31582, "time": 0.16809}
{"mode": "train", "epoch": 1, "iter": 4400, "lr": 0.00029, "memory": 1942, "data_time": 0.00571, "decode.loss_ce": 1.12442, "decode.acc_seg": 60.13831, "loss": 1.12442, "time": 0.16666}
{"mode": "train", "epoch": 1, "iter": 4450, "lr": 0.00029, "memory": 1942, "data_time": 0.00418, "decode.loss_ce": 1.28459, "decode.acc_seg": 51.50016, "loss": 1.28459, "time": 0.16615}
{"mode": "train", "epoch": 1, "iter": 4500, "lr": 0.00029, "memory": 1942, "data_time": 0.0062, "decode.loss_ce": 1.12618, "decode.acc_seg": 59.68151, "loss": 1.12618, "time": 0.16428}
{"mode": "train", "epoch": 1, "iter": 4550, "lr": 0.00029, "memory": 1942, "data_time": 0.00408, "decode.loss_ce": 1.257, "decode.acc_seg": 53.67817, "loss": 1.257, "time": 0.16983}
{"mode": "train", "epoch": 1, "iter": 4600, "lr": 0.00029, "memory": 1942, "data_time": 0.00524, "decode.loss_ce": 1.32175, "decode.acc_seg": 51.36699, "loss": 1.32175, "time": 0.17052}
{"mode": "train", "epoch": 1, "iter": 4650, "lr": 0.00029, "memory": 1942, "data_time": 0.00346, "decode.loss_ce": 1.07582, "decode.acc_seg": 59.14243, "loss": 1.07582, "time": 0.16787}
{"mode": "train", "epoch": 1, "iter": 4700, "lr": 0.00029, "memory": 1942, "data_time": 0.00571, "decode.loss_ce": 1.21775, "decode.acc_seg": 53.72697, "loss": 1.21775, "time": 0.16867}
{"mode": "train", "epoch": 1, "iter": 4750, "lr": 0.00029, "memory": 1942, "data_time": 0.00453, "decode.loss_ce": 0.9863, "decode.acc_seg": 65.08542, "loss": 0.9863, "time": 0.1699}
{"mode": "train", "epoch": 1, "iter": 4800, "lr": 0.00029, "memory": 1942, "data_time": 0.0051, "decode.loss_ce": 1.24688, "decode.acc_seg": 53.01131, "loss": 1.24688, "time": 0.16937}
{"mode": "train", "epoch": 1, "iter": 4850, "lr": 0.00029, "memory": 1942, "data_time": 0.00355, "decode.loss_ce": 1.18779, "decode.acc_seg": 57.7003, "loss": 1.18779, "time": 0.16787}
{"mode": "train", "epoch": 1, "iter": 4900, "lr": 0.00029, "memory": 1942, "data_time": 0.00211, "decode.loss_ce": 1.14524, "decode.acc_seg": 57.8609, "loss": 1.14524, "time": 0.16782}
{"mode": "train", "epoch": 1, "iter": 4950, "lr": 0.00029, "memory": 1942, "data_time": 0.00367, "decode.loss_ce": 1.22823, "decode.acc_seg": 54.16426, "loss": 1.22823, "time": 0.16945}
{"mode": "train", "epoch": 1, "iter": 5000, "lr": 0.00029, "memory": 1942, "data_time": 0.00205, "decode.loss_ce": 1.01835, "decode.acc_seg": 62.92869, "loss": 1.01835, "time": 0.16711}
